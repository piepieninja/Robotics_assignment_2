# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from a3_p2/ExtractedLine.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ExtractedLine(genpy.Message):
  _md5sum = "f75a43af20e7eac85f98816304fa2031"
  _type = "a3_p2/ExtractedLine"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The r and alpha parameters define the extracted line.
float32 r
float32 alpha
#
# The following points are used for display / debugging purposes only.
# These points come from the position of the first and last laser scan points
# used to estimate the line. They do not define the line and may not have even
# been used in estimating the line (e.g. they may have exceeded the
# maximum_range parameter). However, they are useful in visualizing what range
# of scan points were used to estimate the line.
geometry_msgs/Point firstScanPoint
geometry_msgs/Point lastScanPoint
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['r','alpha','firstScanPoint','lastScanPoint']
  _slot_types = ['float32','float32','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       r,alpha,firstScanPoint,lastScanPoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtractedLine, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.r is None:
        self.r = 0.
      if self.alpha is None:
        self.alpha = 0.
      if self.firstScanPoint is None:
        self.firstScanPoint = geometry_msgs.msg.Point()
      if self.lastScanPoint is None:
        self.lastScanPoint = geometry_msgs.msg.Point()
    else:
      self.r = 0.
      self.alpha = 0.
      self.firstScanPoint = geometry_msgs.msg.Point()
      self.lastScanPoint = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f6d().pack(_x.r, _x.alpha, _x.firstScanPoint.x, _x.firstScanPoint.y, _x.firstScanPoint.z, _x.lastScanPoint.x, _x.lastScanPoint.y, _x.lastScanPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.firstScanPoint is None:
        self.firstScanPoint = geometry_msgs.msg.Point()
      if self.lastScanPoint is None:
        self.lastScanPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.r, _x.alpha, _x.firstScanPoint.x, _x.firstScanPoint.y, _x.firstScanPoint.z, _x.lastScanPoint.x, _x.lastScanPoint.y, _x.lastScanPoint.z,) = _get_struct_2f6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f6d().pack(_x.r, _x.alpha, _x.firstScanPoint.x, _x.firstScanPoint.y, _x.firstScanPoint.z, _x.lastScanPoint.x, _x.lastScanPoint.y, _x.lastScanPoint.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.firstScanPoint is None:
        self.firstScanPoint = geometry_msgs.msg.Point()
      if self.lastScanPoint is None:
        self.lastScanPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.r, _x.alpha, _x.firstScanPoint.x, _x.firstScanPoint.y, _x.firstScanPoint.z, _x.lastScanPoint.x, _x.lastScanPoint.y, _x.lastScanPoint.z,) = _get_struct_2f6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f6d = None
def _get_struct_2f6d():
    global _struct_2f6d
    if _struct_2f6d is None:
        _struct_2f6d = struct.Struct("<2f6d")
    return _struct_2f6d
